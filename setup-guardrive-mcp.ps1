# Script de configuracao do GUARDRIVE MCP
# Configura o ecosistema MCP para desenvolvimento GUARDRIVE com suporte multi-plataforma

# Definir constantes
$GUARDRIVE_ROOT = $PSScriptRoot
$MCP_CORE_PATH = Join-Path $GUARDRIVE_ROOT "guardrive-mcp-core"
$WARP_CONFIG_PATH = "$env:APPDATA\Warp"
$WARP_MCP_CONFIG = Join-Path $WARP_CONFIG_PATH "mcp_servers.json"
$LOCAL_WARP_CONFIG = Join-Path $GUARDRIVE_ROOT "guardrive-mcp-warp.json"

# Funcao para exibir cabecalho
function Show-Header {
    param (
        [string]$Title
    )
    
    Write-Host ""
    Write-Host "==========================================" -ForegroundColor Cyan
    Write-Host "= $($Title.PadRight(40)) =" -ForegroundColor Cyan
    Write-Host "==========================================" -ForegroundColor Cyan
    Write-Host ""
}

# Exibir cabe√ßalho principal
Show-Header "üõ°Ô∏è  GUARDRIVE MCP - CONFIGURA√á√ÉO MULTI-PLATAFORMA"

# Verificar se o Node.js est√° instalado
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js detectado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js n√£o encontrado. Por favor, instale o Node.js (v14+)" -ForegroundColor Red
    exit 1
}

# Verificar pasta do MCP Core
if (Test-Path $MCP_CORE_PATH) {
    Write-Host "‚úÖ MCP Core encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå MCP Core n√£o encontrado em: $MCP_CORE_PATH" -ForegroundColor Red
    exit 1
}

# 1. Configurar MCP Independente
Show-Header "1. Configurando MCP Independente"

# Instalar depend√™ncias
Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Yellow
Set-Location $MCP_CORE_PATH
npm install --silent

# Tornar a CLI execut√°vel (chmod +x equivalente)
$cliJs = Join-Path $MCP_CORE_PATH "cli.js"
$warpBridgeJs = Join-Path $MCP_CORE_PATH "warp-bridge.js"

# Criar links simb√≥licos para facilitar o acesso
$binDir = Join-Path $GUARDRIVE_ROOT "bin"
if (-not (Test-Path $binDir)) {
    New-Item -ItemType Directory -Path $binDir | Out-Null
    Write-Host "‚úÖ Diret√≥rio bin criado" -ForegroundColor Green
}

# Link para CLI
$cliLink = Join-Path $binDir "guardrive-mcp.cmd"
@"
@echo off
node "$cliJs" %*
"@ | Out-File -FilePath $cliLink -Encoding ascii

Write-Host "‚úÖ CLI dispon√≠vel em: $cliLink" -ForegroundColor Green

# 2. Configurar integra√ß√£o com clientes MCP
Show-Header "2. Configurando Integra√ß√£o Multi-Cliente"

# Configurar para m√∫ltiplos clientes MCP
Write-Host "üìã Configurando para clientes: Warp, VS Code, Cursor, Claude Desktop" -ForegroundColor Yellow

# Warp Terminal
if (-not (Test-Path $WARP_CONFIG_PATH)) {
    New-Item -ItemType Directory -Path $WARP_CONFIG_PATH | Out-Null
    Write-Host "‚úÖ Diret√≥rio de configura√ß√£o do Warp criado" -ForegroundColor Green
}

# Copiar configura√ß√£o do MCP para o Warp
Copy-Item -Path $LOCAL_WARP_CONFIG -Destination $WARP_MCP_CONFIG -Force
Write-Host "‚úÖ Configura√ß√£o do MCP copiada para o Warp: $WARP_MCP_CONFIG" -ForegroundColor Green

# Ajustar caminhos na configura√ß√£o do Warp
$warpConfig = Get-Content $WARP_MCP_CONFIG -Raw | ConvertFrom-Json
$warpConfig.mcpServers.'guardrive-mcp-custom'.args[0] = (Join-Path $MCP_CORE_PATH "warp-bridge.js")
$warpConfig.mcpServers.'guardrive-devops'.args[0] = (Join-Path $GUARDRIVE_ROOT "devops-orchestrator\index.js")
$warpConfig.mcpServers.'guardrive-monitor'.args[0] = (Join-Path $GUARDRIVE_ROOT "system-monitor\index.js")

# Salvar configura√ß√£o atualizada
$warpConfig | ConvertTo-Json -Depth 5 | Set-Content $WARP_MCP_CONFIG

Write-Host "‚úÖ Caminhos ajustados na configura√ß√£o do Warp" -ForegroundColor Green

# 3. Verificar instala√ß√£o
Show-Header "3. Verificando Instala√ß√£o"

# Testar CLI independente
try {
    Write-Host "üß™ Testando CLI independente..." -ForegroundColor Yellow
    $output = & node "$cliJs" --version
    Write-Host "‚úÖ CLI funcionando: $output" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Teste da CLI falhou. Erro: $_" -ForegroundColor Yellow
}

# Testar bridge do Warp
try {
    Write-Host "üß™ Verificando bridge do Warp..." -ForegroundColor Yellow
    if (Test-Path $warpBridgeJs) {
        Write-Host "‚úÖ Bridge do Warp encontrado" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Bridge do Warp n√£o encontrado" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è Verifica√ß√£o do bridge falhou. Erro: $_" -ForegroundColor Yellow
}

# 4. Instru√ß√µes finais
Show-Header "4. Configura√ß√£o Conclu√≠da"

Write-Host "üéâ Configura√ß√£o do GUARDRIVE MCP conclu√≠da com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìå Como usar:" -ForegroundColor Cyan
Write-Host ""
Write-Host "   üìã MCP Independente:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Via script: .\bin\guardrive-mcp.cmd <comando>" -ForegroundColor White
Write-Host "   ‚Ä¢ Exemplo: .\bin\guardrive-mcp.cmd start-session" -ForegroundColor White
Write-Host ""
Write-Host "   üìã Via Clientes MCP:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Warp Terminal: 'Iniciar sess√£o de desenvolvimento'" -ForegroundColor White
Write-Host "   ‚Ä¢ VS Code: Ctrl+Shift+P ‚Üí GUARDRIVE MCP" -ForegroundColor White
Write-Host "   ‚Ä¢ Cursor: Use Chat com comandos GUARDRIVE" -ForegroundColor White
Write-Host "   ‚Ä¢ Claude Desktop: Ferramentas GUARDRIVE dispon√≠veis" -ForegroundColor White
Write-Host ""
Write-Host "üîÑ Para atualizar a configura√ß√£o no futuro, execute este script novamente." -ForegroundColor Magenta
Write-Host ""

# Retornar ao diret√≥rio original
Set-Location $GUARDRIVE_ROOT

