# SYMBEON GitHub Organization Creation & Migration Script
# Executa com privil√©gios administrativos conforme autoriza√ß√£o do usu√°rio

param(
    [string]$OrgName = "SYMBEON-AI",
    [string]$OrgDescription = "Symbiotic Evolution Operating Network - AI Platform for Enterprise Automation",
    [switch]$DryRun = $false,
    [switch]$Force = $false
)

function Invoke-AdminCommand {
    param([string]$Command, [string]$Description = "Comando administrativo")
    
    Write-Host "[ADMIN] $Description" -ForegroundColor Yellow
    
    $encodedCommand = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($Command))
    $scriptPath = "$env:TEMP\admin_symbeon_org.ps1"
    
    @"
# Script gerado pelo Agente Warp para execu√ß√£o administrativa
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    `$adminCommand = [System.Text.Encoding]::Unicode.GetString([Convert]::FromBase64String("$encodedCommand"))
    Start-Process PowerShell -Verb RunAs -ArgumentList "-NoProfile", "-ExecutionPolicy Bypass", "-Command `$adminCommand"
    exit
}
# Se j√° estiver como admin, executa diretamente
$Command
Write-Host "`nComando conclu√≠do. Pressione qualquer tecla para fechar..." -ForegroundColor Green
`$null = `$Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
"@ | Set-Content -Path $scriptPath
    
    # Executar o script criado
    powershell -ExecutionPolicy Bypass -File $scriptPath
    Remove-Item $scriptPath -Force -ErrorAction SilentlyContinue
}

function Write-Success { param([string]$msg) Write-Host "[‚úÖ] $msg" -ForegroundColor Green }
function Write-Error-Msg { param([string]$msg) Write-Host "[‚ùå] $msg" -ForegroundColor Red }
function Write-Info-Msg { param([string]$msg) Write-Host "[‚ÑπÔ∏è] $msg" -ForegroundColor Cyan }
function Write-Warning-Msg { param([string]$msg) Write-Host "[‚ö†Ô∏è] $msg" -ForegroundColor Yellow }

Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Magenta
Write-Host "      üöÄ SYMBEON GITHUB ORGANIZATION CREATOR üöÄ" -ForegroundColor Magenta
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Magenta

Write-Info-Msg "Configura√ß√£o:"
Write-Host "  ‚Ä¢ Nome da Organiza√ß√£o: $OrgName" -ForegroundColor White
Write-Host "  ‚Ä¢ Descri√ß√£o: $OrgDescription" -ForegroundColor White
Write-Host "  ‚Ä¢ Modo: $(if($DryRun){'DRY RUN (simula√ß√£o)'}else{'EXECU√á√ÉO REAL'})" -ForegroundColor White

if ($DryRun) {
    Write-Warning-Msg "MODO DRY RUN - Nenhuma altera√ß√£o ser√° feita"
}

# Verificar pr√©-requisitos
Write-Info-Msg "Verificando pr√©-requisitos..."

# Verificar Git
try {
    $gitVersion = git --version
    Write-Success "Git dispon√≠vel: $gitVersion"
} catch {
    Write-Error-Msg "Git n√£o encontrado. Instale o Git primeiro."
    exit 1
}

# Verificar GitHub CLI
try {
    $ghVersion = gh --version | Select-Object -First 1
    Write-Success "GitHub CLI dispon√≠vel: $ghVersion"
} catch {
    Write-Error-Msg "GitHub CLI n√£o encontrado. Executando instala√ß√£o..."
    
    if (-not $DryRun) {
        $installCommand = @"
Write-Host 'Instalando GitHub CLI...' -ForegroundColor Yellow
winget install --id GitHub.cli --silent --accept-package-agreements --accept-source-agreements
Write-Host 'GitHub CLI instalado!' -ForegroundColor Green
"@
        Invoke-AdminCommand -Command $installCommand -Description "Instala√ß√£o GitHub CLI"
    }
}

# Verificar autentica√ß√£o
Write-Info-Msg "Verificando autentica√ß√£o GitHub..."
$authStatus = gh auth status 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Warning-Msg "GitHub CLI n√£o autenticado"
    Write-Info-Msg "Execute primeiro: gh auth login"
    if (-not $Force) {
        $continue = Read-Host "Continuar mesmo assim? (s/N)"
        if ($continue -ne 's') {
            Write-Info-Msg "Opera√ß√£o cancelada. Execute 'gh auth login' primeiro."
            exit 0
        }
    }
} else {
    Write-Success "GitHub CLI autenticado"
}

# Verificar reposit√≥rio atual
Write-Info-Msg "Analisando reposit√≥rio atual..."
try {
    $currentRepo = git remote get-url origin
    $repoName = ($currentRepo -split '/')[-1] -replace '\.git$', ''
    $currentOwner = ($currentRepo -split '/')[-2]
    
    Write-Success "Reposit√≥rio atual: $currentRepo"
    Write-Info-Msg "  ‚Ä¢ Propriet√°rio: $currentOwner"
    Write-Info-Msg "  ‚Ä¢ Nome: $repoName"
} catch {
    Write-Error-Msg "N√£o √© um reposit√≥rio Git v√°lido"
    exit 1
}

# Verificar se a organiza√ß√£o j√° existe
Write-Info-Msg "Verificando se a organiza√ß√£o '$OrgName' j√° existe..."
if (-not $DryRun) {
    $orgExists = gh api "/orgs/$OrgName" 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Warning-Msg "Organiza√ß√£o '$OrgName' j√° existe!"
        if (-not $Force) {
            $continue = Read-Host "Continuar com migra√ß√£o? (s/N)"
            if ($continue -ne 's') {
                Write-Info-Msg "Opera√ß√£o cancelada."
                exit 0
            }
        }
    } else {
        Write-Info-Msg "Organiza√ß√£o '$OrgName' n√£o existe - ser√° criada"
    }
}

# Plano de execu√ß√£o
Write-Host "`n‚ïê‚ïê‚ïê PLANO DE EXECU√á√ÉO ‚ïê‚ïê‚ïê" -ForegroundColor Yellow
Write-Host "1. üè¢ Criar organiza√ß√£o '$OrgName'" -ForegroundColor Cyan
Write-Host "2. üìã Configurar descri√ß√£o e settings" -ForegroundColor Cyan
Write-Host "3. üîÑ Transferir reposit√≥rio '$repoName'" -ForegroundColor Cyan
Write-Host "4. üìÅ Renomear para 'symbeon-platform'" -ForegroundColor Cyan
Write-Host "5. ‚öôÔ∏è Configurar settings organizacionais" -ForegroundColor Cyan
Write-Host "6. üìä Verificar migra√ß√£o" -ForegroundColor Cyan

if (-not $Force -and -not $DryRun) {
    $proceed = Read-Host "`nProsseguir com a cria√ß√£o? (s/N)"
    if ($proceed -ne 's') {
        Write-Info-Msg "Opera√ß√£o cancelada pelo usu√°rio."
        exit 0
    }
}

Write-Host "`n‚ïê‚ïê‚ïê INICIANDO MIGRA√á√ÉO ‚ïê‚ïê‚ïê" -ForegroundColor Green

# Passo 1: Criar organiza√ß√£o
Write-Info-Msg "Passo 1/6: Criando organiza√ß√£o GitHub..."
if (-not $DryRun) {
    try {
        # Verificar se j√° existe primeiro
        $orgCheck = gh api "/orgs/$OrgName" 2>$null
        if ($LASTEXITCODE -ne 0) {
            # Criar organiza√ß√£o (isso pode exigir interface web)
            Write-Warning-Msg "A cria√ß√£o de organiza√ß√µes via CLI pode requerer confirma√ß√£o web"
            Write-Info-Msg "Executando comando de cria√ß√£o..."
            
            # Tentar criar via API (pode falhar e exigir web)
            $orgData = @{
                login = $OrgName
                description = $OrgDescription
                company = "SYMBEON Technologies"
                location = "Global"
                blog = "https://github.com/$OrgName"
            } | ConvertTo-Json
            
            $createResult = gh api --method POST "/user/orgs" --input - <<< $orgData 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-Success "Organiza√ß√£o '$OrgName' criada com sucesso!"
            } else {
                Write-Warning-Msg "Cria√ß√£o via API falhou. Ser√° necess√°rio criar manualmente."
                Write-Info-Msg "Visite: https://github.com/organizations/new"
                Write-Info-Msg "Nome: $OrgName"
                Write-Info-Msg "Descri√ß√£o: $OrgDescription"
                Read-Host "Pressione Enter ap√≥s criar a organiza√ß√£o manualmente"
            }
        } else {
            Write-Success "Organiza√ß√£o '$OrgName' j√° existe"
        }
    } catch {
        Write-Warning-Msg "Erro na cria√ß√£o autom√°tica: $($_.Exception.Message)"
        Write-Info-Msg "Prosseguindo assumindo que a organiza√ß√£o existe..."
    }
} else {
    Write-Info-Msg "[DRY RUN] Criaria organiza√ß√£o '$OrgName'"
}

# Passo 2: Configurar organiza√ß√£o
Write-Info-Msg "Passo 2/6: Configurando organiza√ß√£o..."
if (-not $DryRun) {
    try {
        # Atualizar descri√ß√£o e configura√ß√µes
        $updateData = @{
            description = $OrgDescription
            company = "SYMBEON Technologies"
            blog = "https://symbeon.ai"
            location = "Global"
            email = "contact@symbeon.ai"
        } | ConvertTo-Json
        
        gh api --method PATCH "/orgs/$OrgName" --input - <<< $updateData 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Configura√ß√µes da organiza√ß√£o atualizadas"
        }
    } catch {
        Write-Warning-Msg "Algumas configura√ß√µes podem precisar ser feitas manualmente"
    }
} else {
    Write-Info-Msg "[DRY RUN] Configuraria organiza√ß√£o com descri√ß√£o e settings"
}

# Passo 3: Transferir reposit√≥rio
Write-Info-Msg "Passo 3/6: Transferindo reposit√≥rio..."
if (-not $DryRun) {
    try {
        Write-Warning-Msg "ATEN√á√ÉO: Transferindo '$currentOwner/$repoName' para '$OrgName'"
        
        # Fazer backup das informa√ß√µes antes da transfer√™ncia
        $backupInfo = @{
            originalOwner = $currentOwner
            originalName = $repoName
            transferDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            newOrg = $OrgName
        }
        $backupInfo | ConvertTo-Json | Out-File "migration-backup.json" -Encoding UTF8
        
        # Transferir reposit√≥rio
        gh repo transfer "$currentOwner/$repoName" $OrgName
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Reposit√≥rio transferido para $OrgName/$repoName"
        } else {
            Write-Error-Msg "Falha na transfer√™ncia do reposit√≥rio"
            exit 1
        }
    } catch {
        Write-Error-Msg "Erro na transfer√™ncia: $($_.Exception.Message)"
        exit 1
    }
} else {
    Write-Info-Msg "[DRY RUN] Transferiria '$currentOwner/$repoName' para '$OrgName'"
}

# Passo 4: Renomear reposit√≥rio
Write-Info-Msg "Passo 4/6: Renomeando reposit√≥rio para 'symbeon-platform'..."
if (-not $DryRun) {
    try {
        $renameData = @{
            name = "symbeon-platform"
            description = "SYMBEON AI Platform - Enterprise Automation & Symbiotic Evolution Operating Network"
        } | ConvertTo-Json
        
        gh api --method PATCH "/repos/$OrgName/$repoName" --input - <<< $renameData
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Reposit√≥rio renomeado para 'symbeon-platform'"
        }
    } catch {
        Write-Warning-Msg "Renomea√ß√£o pode precisar ser feita manualmente"
    }
} else {
    Write-Info-Msg "[DRY RUN] Renomearia reposit√≥rio para 'symbeon-platform'"
}

# Passo 5: Configurar settings organizacionais
Write-Info-Msg "Passo 5/6: Configurando settings do reposit√≥rio..."
if (-not $DryRun) {
    try {
        # Configura√ß√µes do reposit√≥rio
        $repoSettings = @{
            description = "SYMBEON AI Platform - Enterprise Automation & Symbiotic Evolution Operating Network"
            homepage = "https://symbeon.ai"
            topics = @("ai", "automation", "mcp-servers", "enterprise", "platform", "symbeon")
            has_issues = $true
            has_projects = $true
            has_wiki = $true
            has_downloads = $true
            default_branch = "main"
        } | ConvertTo-Json
        
        gh api --method PATCH "/repos/$OrgName/symbeon-platform" --input - <<< $repoSettings
        
        Write-Success "Settings do reposit√≥rio configurados"
    } catch {
        Write-Warning-Msg "Algumas configura√ß√µes podem precisar ser feitas manualmente"
    }
} else {
    Write-Info-Msg "[DRY RUN] Configuraria settings do reposit√≥rio"
}

# Passo 6: Verifica√ß√£o final
Write-Info-Msg "Passo 6/6: Verificando migra√ß√£o..."
if (-not $DryRun) {
    try {
        # Verificar se tudo est√° funcionando
        $orgInfo = gh api "/orgs/$OrgName" | ConvertFrom-Json
        $repoInfo = gh api "/repos/$OrgName/symbeon-platform" | ConvertFrom-Json
        
        Write-Success "Migra√ß√£o conclu√≠da com sucesso!"
        Write-Host "`n‚ïê‚ïê‚ïê RESULTADO DA MIGRA√á√ÉO ‚ïê‚ïê‚ïê" -ForegroundColor Green
        Write-Host "üè¢ Organiza√ß√£o: $($orgInfo.login)" -ForegroundColor White
        Write-Host "üìÅ Reposit√≥rio: $($repoInfo.full_name)" -ForegroundColor White
        Write-Host "üîó URL: $($repoInfo.html_url)" -ForegroundColor White
        Write-Host "üìä Stars: $($repoInfo.stargazers_count)" -ForegroundColor White
        Write-Host "üç¥ Forks: $($repoInfo.forks_count)" -ForegroundColor White
        
    } catch {
        Write-Warning-Msg "Verifica√ß√£o parcial - algumas informa√ß√µes podem n√£o estar dispon√≠veis"
    }
} else {
    Write-Info-Msg "[DRY RUN] Verificaria o resultado da migra√ß√£o"
}

# Pr√≥ximos passos
Write-Host "`n‚ïê‚ïê‚ïê PR√ìXIMOS PASSOS ‚ïê‚ïê‚ïê" -ForegroundColor Yellow
Write-Host "1. üîÑ Atualizar remote local: git remote set-url origin https://github.com/$OrgName/symbeon-platform.git" -ForegroundColor Cyan
Write-Host "2. üè∑Ô∏è Criar nova tag: git tag v1.0.2 && git push origin v1.0.2" -ForegroundColor Cyan
Write-Host "3. üìã Criar reposit√≥rios adicionais (mcp-servers, docs, examples)" -ForegroundColor Cyan
Write-Host "4. üë• Configurar teams e permiss√µes" -ForegroundColor Cyan
Write-Host "5. üéØ Atualizar README com nova organiza√ß√£o" -ForegroundColor Cyan

# Comandos prontos
Write-Host "`n‚ïê‚ïê‚ïê COMANDOS PRONTOS ‚ïê‚ïê‚ïê" -ForegroundColor Green
Write-Host @"
# Atualizar remote local
git remote set-url origin https://github.com/$OrgName/symbeon-platform.git

# Verificar
git remote -v

# Push de teste
git push origin main

"@ -ForegroundColor White

Write-Success "Script de migra√ß√£o conclu√≠do!"

if (-not $DryRun) {
    Write-Host "`nVisite: https://github.com/$OrgName" -ForegroundColor Cyan
    Write-Info-Msg "Backup das informa√ß√µes salvo em: migration-backup.json"
}

